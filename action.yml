name: "DevBird Action v0.1"
description: "Fully automated AI-powered development workflow for GitHub repositories."
branding:
  icon: 'archive'
  color: 'gray-dark'
  
inputs:
  prompt:
    description: "Instructions for DevBird. Can be a direct prompt or custom template."
    required: true

  base_branch:
    description: "The branch to use as the base/source when creating new branches (defaults to repository default branch)"
    required: false

  devbird_mode:
    description: "The DevBird execution mode. Can be 'develop' (default) or 'plan' (for task graph planning)"
    required: false
    default: 'develop'

  agent:
    description: "The agent to use for the action. Can be 'claude_cli', 'claude_code', 'gemini_cli', 'codex_cli', 'opencode', 'crush_cli', or 'github_copilot_cli'"
    required: true

  agent_model:
    description: "The (optional) model to use for the agent"
    required: false
    default: ''

  claude_code_oauth_token:
    description: "Claude Code OAuth token (alternative to anthropic_api_key)"
    required: false

  # For openai codex and opencode
  openai_api_key:
    description: "OpenAI API key"
    required: false

  # For anthropic claude and opencode
  anthropic_api_key:
    description: "Anthropic API key"
    required: false

  # For Gemini CLI
  gemini_api_key:
    description: "Gemini API key"
    required: false

  google_api_key:
    description: "Google API key"
    required: false

  devbird_workflow_execution_token:
    description: "DevBird workflow execution token"
    required: true

  delino_access_token:
    description: "Delino access token"
    required: true

runs:
  using: "composite"
  steps:
    # Prepare resources
    - name: Prepare
      id: prepare
      uses: delinoio/devbird-action/prepare@main
      with:
        agent: ${{ inputs.agent }}
        agent_model: ${{ inputs.agent_model }}
        devbird_mode: ${{ inputs.devbird_mode }}
        devbird_workflow_execution_token: ${{ inputs.devbird_workflow_execution_token }}
        base_branch: ${{ inputs.base_branch }}
        delino_access_token: ${{ inputs.delino_access_token }}

    # Run the AI agent
    - name: Run Claude Code
      if: inputs.agent == 'claude_code'
      uses: anthropics/claude-code-action@v1
      with:
        anthropic_api_key: ${{ inputs.anthropic_api_key }}
        claude_code_oauth_token: ${{ inputs.claude_code_oauth_token }}

        claude_args: |
          --allowed-tools 'Bash,Edit,Write,WebSearch,WebFetch'

        branch_prefix: 'devbird/'
        base_branch: ${{ inputs.base_branch }}
        github_token: ${{ steps.prepare.outputs.github_token }}
        use_sticky_comment: true

        prompt: |
          ${{ inputs.prompt }}
          
          ---

          Context:
            - Repository: ${{ github.repository }}
            - Base branch: ${{ inputs.base_branch }}
            - Use `devbird/` prefix for new branch names.


    - name: Run Codex
      if: inputs.agent == 'codex_cli'
      uses: openai/codex-action@main
      with:
        openai-api-key: ${{ inputs.openai_api_key }}
        sandbox: danger-full-access
        prompt: |
          ${{ inputs.prompt }}

          ---

          Context:
            - Repository: ${{ github.repository }}
            - Base branch: ${{ inputs.base_branch }}
            - Use `devbird/` prefix for new branch names.

    - name: Run Gemini CLI
      if: inputs.agent == 'gemini_cli'
      uses: google-github-actions/run-gemini-cli@main
      env:
        GITHUB_TOKEN: ${{ steps.prepare.outputs.github_token }}
      with:
        gemini_api_key: ${{ inputs.gemini_api_key }}
        google_api_key: ${{ inputs.google_api_key }}
        gemini_model: ${{ inputs.agent_model }}
        prompt: |
          ${{ inputs.prompt }}

          ---

          Context:
            - Repository: ${{ github.repository }}
            - Base branch: ${{ inputs.base_branch }}
            - Use `devbird/` prefix for new branch names.

    - name: Run OpenCode
      if: inputs.agent == 'opencode'
      shell: bash
      env:
        OPENAI_API_KEY: ${{ inputs.openai_api_key }}
        ANTHROPIC_API_KEY: ${{ inputs.anthropic_api_key }}
        GITHUB_TOKEN: ${{ steps.prepare.outputs.github_token }}
      run: |
        # Install OpenCode CLI
        npm install -g @opencode-ai/opencode

        # Configure authentication for OpenAI if API key is provided
        if [ -n "$OPENAI_API_KEY" ]; then
          echo "Configuring OpenAI authentication..."
          mkdir -p ~/.local/share/opencode
          cat > ~/.local/share/opencode/auth.json << 'EOF'
        {
          "openai": {
            "apiKey": "$OPENAI_API_KEY"
          }
        }
        EOF
        fi

        # Configure authentication for Anthropic if API key is provided
        if [ -n "$ANTHROPIC_API_KEY" ]; then
          echo "Configuring Anthropic authentication..."
          mkdir -p ~/.local/share/opencode
          if [ -f ~/.local/share/opencode/auth.json ]; then
            # Merge with existing auth.json
            jq --arg key "$ANTHROPIC_API_KEY" '.anthropic = {"apiKey": $key}' ~/.local/share/opencode/auth.json > ~/.local/share/opencode/auth.json.tmp
            mv ~/.local/share/opencode/auth.json.tmp ~/.local/share/opencode/auth.json
          else
            cat > ~/.local/share/opencode/auth.json << 'EOF'
        {
          "anthropic": {
            "apiKey": "$ANTHROPIC_API_KEY"
          }
        }
        EOF
          fi
        fi

        # Prepare the prompt with context
        PROMPT="${{ inputs.prompt }}

        ---

        Context:
          - Repository: ${{ github.repository }}
          - Base branch: ${{ inputs.base_branch }}
          - Use \`devbird/\` prefix for new branch names."

        # Run OpenCode with the prompt
        if [ -n "${{ inputs.agent_model }}" ]; then
          opencode run --model "${{ inputs.agent_model }}" "$PROMPT"
        else
          opencode run "$PROMPT"
        fi


    # Run the postprocess
    - name: Postprocess
      uses: delinoio/devbird-action/postprocess@main
      with:
        agent: ${{ inputs.agent }}
        agent_model: ${{ inputs.agent_model }}
        devbird_mode: ${{ inputs.devbird_mode }}
        devbird_workflow_execution_token: ${{ inputs.devbird_workflow_execution_token }}
        base_branch: ${{ inputs.base_branch }}
        delino_access_token: ${{ inputs.delino_access_token }}
